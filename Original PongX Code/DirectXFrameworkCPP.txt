#include "DirectXFramework.h"

using namespace std;

DirectXFramework::DirectXFramework()
{
	m_bVsync		 = false;
	m_pD3DDevice	 = 0;
	m_pD3DObject	 = 0;
	m_pD3DSprite	 = 0;
	m_pD3DFont		 = 0;
	m_pDIKeyboard	 = 0;
	m_pDIMouse		 = 0;
	m_pDIObject		 = 0;
	m_pBarP1Texture	 = 0;
	m_pBarP2Texture	 = 0;
	m_pBallTexture	 = 0;
	m_pBkgdTexture	 = 0;
	//FMOD Members
	m_pFSystem		= 0;
	m_pFSound		= 0;
	m_pFChannel		= 0;
	m_pFStream		= 0;
	//DirectShow Objects
	m_pGraphBuilder	= 0;
	m_pVideoWindow	= 0;
	m_pMediaControl	= 0;
	m_pMediaEvent	= 0;
	//State
	m_iState		= 0;
	//class objects will call their constructors
	ballObj			 = new Ball[1];
	wallObj			 = new Wall[2];
	gameObj			 = new GamePlay[1];
}
DirectXFramework::~DirectXFramework()
{
	Shutdown();
}
//////////////////////
//		Init()		//
//////////////////////
void DirectXFramework::Init(HWND& hWnd, HINSTANCE& hInst, bool bWindowed)
{
	m_hWnd = hWnd; //copy the handler to the window in m_hWnd
	// Find the width and height of window using hWnd and GetWindowRect()
	RECT rect;
	GetWindowRect(hWnd, &rect);
	int width = rect.right - rect.left;
	int height = rect.bottom - rect.top;
	//----------------------------------------------//
	//		Initiate the Direct 3D Components		//
	//----------------------------------------------//
	// Create the D3D Object
	m_pD3DObject = Direct3DCreate9(D3D_SDK_VERSION);
	// Create the Direct Input Object
	DirectInput8Create(hInst, DIRECTINPUT_VERSION, IID_IDirectInput8, (void**)&m_pDIObject, NULL);
	
	
	///////////////////
	// Create Device //
	///////////////////
	HRESULT hr;
	hr = m_pDIObject->CreateDevice(GUID_SysKeyboard, &m_pDIKeyboard, NULL);
	if(FAILED(hr))
	{
		hr = m_pDIObject->CreateDevice(GUID_SysKeyboard, &m_pDIKeyboard, NULL);
	}
	hr = m_pDIObject->CreateDevice(GUID_SysMouse, &m_pDIMouse, NULL);
	if(FAILED(hr))
	{
		hr = m_pDIObject->CreateDevice(GUID_SysMouse, &m_pDIMouse, NULL);
	}
	//Set Data Format
	m_pDIKeyboard->SetDataFormat(&c_dfDIKeyboard);
	m_pDIMouse->SetDataFormat(&c_dfDIMouse2);
	//Set Cooperative Level 
	m_pDIKeyboard->SetCooperativeLevel(hWnd, DISCL_FOREGROUND | DISCL_NONEXCLUSIVE);
	m_pDIMouse->SetCooperativeLevel(hWnd, DISCL_FOREGROUND | DISCL_NONEXCLUSIVE);
	//Acquire the device 
	hr = m_pDIKeyboard->Acquire();
	if(FAILED(hr))
	{
		hr = m_pDIKeyboard->Acquire();
	}
	hr = m_pDIMouse->Acquire();
	if(FAILED(hr))
	{
		hr = m_pDIMouse->Acquire();
	}
	//////////
	// RECT //
	//////////
	//////////////////////////////////////////////////
	//	Direct Show COM Objects Initialized
	/////////////////////////////////////////////////
	CoInitialize(NULL);//Initialize the objects to NULL
	//Create the instance for our Filter Graph Manager
	CoCreateInstance(CLSID_FilterGraph, NULL, CLSCTX_INPROC_SERVER, IID_IGraphBuilder, (void**) &m_pGraphBuilder);
	//IMediaControl object created to control our streaming
	m_pGraphBuilder->QueryInterface(IID_IMediaControl,
                                (void**)&m_pMediaControl);
	//IMediaEvent object created to receive events from our Filter Graph Manager
	m_pGraphBuilder->QueryInterface(IID_IMediaEvent,
                                (void**)&m_pMediaEvent);
	//initiate and build a filter graph for intro.wmv
	m_pGraphBuilder->RenderFile(L"Content\\Movie\\Intro.wmv", NULL);
	// Find the width and height of window using hWnd and GetWindowRect()
    // Video Window
    IVideoWindow* m_pVideoWindow;
    m_pMediaControl->QueryInterface(IID_IVideoWindow,
                                    (void**)&m_pVideoWindow);
    // Setup the window
    m_pVideoWindow->put_Owner((OAHWND)m_hWnd);
    // Set the style
    m_pVideoWindow->put_WindowStyle(WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE);
    // Obtain the size of the window
    RECT WinRect;
    GetClientRect(m_hWnd, &WinRect);
    // Set the video size to the size of the window
    m_pVideoWindow->SetWindowPosition(WinRect.left, WinRect.top,
                                        WinRect.right, WinRect.bottom);
	// REMOVE AND CHANGE THIS!! 
	
	///****************************************///
	// Set Up Parameters for GamePlay objects
	// Paddle, Ball, and Wall Objects need definition
	//******************************************//
	/************************************************************************
	//SetUp MIN_Y and MAX_Y of objects : MAX_X ~ 1200 & MAX_Y ~ 900; MIN_X = ~400, MIN_Y =~ 300
	paddleObjA.setMaxY(775);//originally height * 1.40
	paddleObjA.setMinY(300);
	paddleObjB.setMaxY(775);//originally height * 1.40
	paddleObjB.setMinY(300);
	//setup paddle position
	paddleObjB.setPosX(1168);
	paddleObjB.setPosY(450);
	paddleObjA.setPosX(width * 0.5);
	paddleObjA.setPosY(450);
	//Set up ball position
	ballObj[0].setPos(800, 450);
	//Set Up Ball velocity
	ballObj[0].setYVel(0.35f);
	ballObj[0].setXVel(0.35f);
	***********************************************************************/

	// Set D3D Device presentation parameters before creating the device
	D3DPRESENT_PARAMETERS D3Dpp;
	ZeroMemory(&D3Dpp, sizeof(D3Dpp));  // NULL the structure's memory

	D3Dpp.hDeviceWindow					= hWnd;										// Handle to the focus window
	D3Dpp.Windowed						= bWindowed;								// Windowed or Full-screen boolean
	D3Dpp.AutoDepthStencilFormat		= D3DFMT_D24S8;								// Format of depth/stencil buffer, 24 bit depth, 8 bit stencil
	D3Dpp.EnableAutoDepthStencil		= TRUE;										// Enables Z-Buffer (Depth Buffer)
	D3Dpp.BackBufferCount				= 1;										// Change if need of > 1 is required at a later date
	D3Dpp.BackBufferFormat				= D3DFMT_X8R8G8B8;							// Back-buffer format, 8 bits for each pixel
	D3Dpp.BackBufferHeight				= height;									// Make sure resolution is supported, use adapter modes
	D3Dpp.BackBufferWidth				= width;									// (Same as above)
	D3Dpp.SwapEffect					= D3DSWAPEFFECT_DISCARD;					// Discard back-buffer, must stay discard to support multi-sample
	D3Dpp.PresentationInterval			= m_bVsync ? D3DPRESENT_INTERVAL_DEFAULT : D3DPRESENT_INTERVAL_IMMEDIATE; // Present back-buffer immediately, unless V-Sync is on								
	D3Dpp.Flags							= D3DPRESENTFLAG_DISCARD_DEPTHSTENCIL;		// This flag should improve performance, if not set to NULL.
	D3Dpp.FullScreen_RefreshRateInHz	= bWindowed ? 0 : D3DPRESENT_RATE_DEFAULT;	// Full-screen refresh rate, use adapter modes or default
	D3Dpp.MultiSampleQuality			= 0;										// MSAA currently off, check documentation for support.
	D3Dpp.MultiSampleType				= D3DMULTISAMPLE_NONE;						// MSAA currently off, check documentation for support.

	// Check device capabilities
	DWORD deviceBehaviorFlags = 0;
	m_pD3DObject->GetDeviceCaps(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, &m_D3DCaps);

	// Determine vertex processing mode
	if(m_D3DCaps.DevCaps & D3DCREATE_HARDWARE_VERTEXPROCESSING)
	{
		// Hardware vertex processing supported? (Video Card)
		deviceBehaviorFlags |= D3DCREATE_HARDWARE_VERTEXPROCESSING;	
	}
	else
	{
		// If not, use software (CPU)
		deviceBehaviorFlags |= D3DCREATE_SOFTWARE_VERTEXPROCESSING; 
	}
	
	// If hardware vertex processing is on, check pure device support
	if(m_D3DCaps.DevCaps & D3DDEVCAPS_PUREDEVICE && deviceBehaviorFlags & D3DCREATE_HARDWARE_VERTEXPROCESSING)
	{
		deviceBehaviorFlags |= D3DCREATE_PUREDEVICE;	
	}
	
	// Create the D3D Device with the present parameters and device flags above
	m_pD3DObject->CreateDevice(
		D3DADAPTER_DEFAULT,		// which adapter to use, set to primary
		D3DDEVTYPE_HAL,			// device type to use, set to hardware rasterization
		hWnd,					// handle to the focus window
		deviceBehaviorFlags,	// behavior flags
		&D3Dpp,					// presentation parameters
		&m_pD3DDevice);			// returned device pointer

	//*************************************************************************

	//////////////////////////////////////////////////////////////////////////
	// Create a Font Object
	//////////////////////////////////////////////////////////////////////////
	
	// Load the D3DX Font

	D3DXCreateFont(m_pD3DDevice, 30, 0, FW_BOLD, 0, false,
                      DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, DEFAULT_QUALITY,
                      DEFAULT_PITCH | FF_DONTCARE, TEXT("Times New Roman"),
                      &m_pD3DFont);

	
	//////////////////////////////////////////////////////////////////////////
	// Create Sprite Object and Textures 
	//////////////////////////////////////////////////////////////////////////
	/**********************CREATE SPRITE OBJECT*********************************/
	D3DXCreateSprite(m_pD3DDevice, &m_pD3DSprite);
	//Texture for Player 1 Sprite - Blue
	D3DXCreateTextureFromFileEx(m_pD3DDevice, 
		L"Content\\Sprite\\blue bar.png", 
		0, 0, 0, 0, D3DFMT_UNKNOWN, D3DPOOL_MANAGED,
		D3DX_DEFAULT, D3DX_DEFAULT, D3DCOLOR_XRGB(255, 0, 255), &m_imageInfo, 0, &m_pBarP1Texture);
	//Texture for Player 2 Sprite - Red
	D3DXCreateTextureFromFileEx(m_pD3DDevice, 
		L"Content\\Sprite\\red bar.png", 
		0, 0, 0, 0, D3DFMT_UNKNOWN, D3DPOOL_MANAGED,
		D3DX_DEFAULT, D3DX_DEFAULT, D3DCOLOR_XRGB(255, 0, 255), &m_imageInfo, 0, &m_pBarP2Texture);
	//Texture for Ball
	D3DXCreateTextureFromFileEx(m_pD3DDevice, 
		L"Content\\Sprite\\Ball.tga", 
		0, 0, 0, 0, D3DFMT_UNKNOWN, D3DPOOL_MANAGED,
		D3DX_DEFAULT, D3DX_DEFAULT, D3DCOLOR_XRGB(255, 0, 255), &m_imageInfo, 0, &m_pBallTexture);
	//Background Texture
	D3DXCreateTextureFromFileEx(m_pD3DDevice, 
		L"Content\\Sprite\\Background.tga", 
		0, 0, 0, 0, D3DFMT_UNKNOWN, D3DPOOL_MANAGED,
		D3DX_DEFAULT, D3DX_DEFAULT, D3DCOLOR_XRGB(255, 0, 255), &m_imageInfo, 0, &m_pBkgdTexture);
	//*************************************************************************
	
	/////////////////////////////////////
	// FMOD SOUND OBJECTS CREATED HERE //
	/////////////////////////////////////
	hr = FMOD::System_Create(&m_pFSystem);
	if(FAILED(hr))
	{
		hr = FMOD::System_Create(&m_pFSystem);
		//should have error message
	}
	hr = m_pFSystem->init(1000, FMOD_INIT_NORMAL, 0);
	if(FAILED(hr))
	{
		hr = m_pFSystem->init(100, FMOD_INIT_NORMAL, 0);
		//should have error message
	}
	/**************************************************************************/
	//CREATE SOUNDS
	//SOUND 1 - SWISH
	hr = m_pFSystem->createSound("Content\\Sound\\swish.wav",
		FMOD_DEFAULT, 0, &m_pFSound);
	if(FAILED(hr))
	{
		//error check
	}
	//SOUND 2 - CHORD
	hr = m_pFSystem->createSound("Content\\Sound\\ding.wav",
		FMOD_DEFAULT, 0, &m_pF1Sound);
	if(FAILED(hr))
	{
		//error check 
	}
	//SOUND LOOP - DING
	hr = m_pFSystem->createStream("Content\\Music\\wave.mp3",
		FMOD_DEFAULT, 0, &m_pFLSound);
	if(FAILED(hr))
	{
		//error check
	}
	/*************************************************************************/
	
	////////////////////////////////////////
	// D3DXVECTOR3: eyePos, lookAt, upVec //
	////////////////////////////////////////
	
	//Declare values for your vectors
	eyePos = D3DXVECTOR3(0.0f, 0.0f, -10.0f);
	lookAt = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	upVec = D3DXVECTOR3(0.0f, 1.0f, 0.0f);
	// define and init the vectors
	D3DXMatrixLookAtLH(
		&viewMat, 
		&eyePos, 
		&lookAt, 
		&upVec);
	m_pD3DDevice->SetTransform(D3DTS_VIEW, &viewMat);
	//Se up the Perspective FOV
	D3DXMatrixPerspectiveFovLH(
		&projMat, 
		D3DXToRadian(65.0f), 
		(float)width / (float)height, 
		1.0f, 
		2000.0f);
	m_pD3DDevice->SetTransform(D3DTS_PROJECTION, &projMat);
	
	/****************
	*	Play movie	*
	*****************/
	if(m_iState == 0)
	{
		hr = m_pMediaControl->Run();//Play the movie after all objects are initialized
		if(SUCCEEDED(hr))
		{
			
		}
	}
}

//The Update function will be responsible for reading the user input and updating it
void DirectXFramework::Update(float dt, int state)
{
	HRESULT hr;
	/*vvvvvvvvvCALCULATE FPS vvvvvvv*/

	//Make static variables to have persistant values across function calls
	static float numFrames = 0.0f;
	static float timeElapsed = 0.0f;

	//increment the frame count
	numFrames += 1.0f;

	//Accumulate how much time has passed 
	timeElapsed += dt;

	//Check if 1 second has passed, and then compute the framerate
	if(timeElapsed >= 1.0f)
	{
		//Frames per Second = numFrames / timeElapsed
		mFPS = numFrames;

		//avg frams in milliseconds
		mMilliSecPerFrame = 1000.0f / mFPS;

		//Reset counter and frame count to prepare 
		//for computing the average stats over the next second
		timeElapsed = 0.0f;
		numFrames = 0.0f;
	}

	/*^^^^^^^^ END FPS CALCULATIONS ^^^^^^^^*/
	//////////////////////////
	// CHECK MOVIE EVENT	//
	//////////////////////////
	if(m_iState == 0)
	{
		long evCode;//event code
		LONG_PTR eventParam1, eventParam2;
		hr = m_pMediaEvent->GetEvent(&evCode, &eventParam1, &eventParam2, 0);
		if(SUCCEEDED(hr))
		{
			if(evCode == EC_COMPLETE)
			{
				m_bVideoOver = true;
				m_pMediaControl->Stop();
				m_pVideoWindow->put_Visible(OAFALSE);
				m_pVideoWindow->put_Owner((OAHWND)m_hWnd);
				m_iState = 1;
			}
		}
	}
	if(m_bVideoOver == true && m_iState < 2)
	{
		m_iState = 1;
	}	

	//////////////////////////
	//	UPDATE DEVICE STATE //
	//////////////////////////
	hr = m_pDIKeyboard->GetDeviceState(sizeof(m_pKeyboardState),(void**)&m_pKeyboardState);
	if(FAILED(hr))
	{
		hr = m_pDIKeyboard->GetDeviceState(sizeof(m_pKeyboardState),(void**)&m_pKeyboardState);
	}
	hr = m_pDIMouse->GetDeviceState(sizeof(DIMOUSESTATE2), (void**) &m_pMouseState);
	if(FAILED(hr))
	{
		//ZeroMemory(&m_pMouseState, sizeof(m_pMouseState));
		hr = m_pDIMouse->Acquire();
	}

	//////////////////////////
	// ENTER GAME STATE		//
	//////////////////////////
	if(m_iState == 2)
	{
		//m_pFChannel->setLoopCount(-1);
		//m_pFChannel->setMode(FMOD_LOOP_NORMAL);
		m_pFSystem->playSound(FMOD_CHANNEL_FREE, m_pFLSound, false, &m_pFChannel);
		//set win conditions
		if(paddleObjA.getScore() != gameObj[0].getScoreToWin() && paddleObjB.getScore() != gameObj[0].getScoreToWin())
		{
			/////////////////////
			// Paddle Updates
			////////////////////
			paddleObjA.updatePBound(paddleObjA.getPosX(), paddleObjA.getPosY());
			paddleObjB.updatePBound(paddleObjB.getPosX(), paddleObjB.getPosY());
			paddleObjA.setPHeight();
			paddleObjB.setPHeight();
			paddleObjA.setPWidth();
			paddleObjB.setPWidth();
			/////////////////////
			// Ball UPdates
			/////////////////////
			ballObj[0].updateBound(ballObj[0].getPosX(), ballObj[0].getPosY());
			ballObj[0].setHeight();
			ballObj[0].setWidth();
			/////////////////////
			// Check Ball Hit //
			////////////////////
			/////////////////////
			//gather the distance between the ball and both paddle objects
			////////////////////
			//update position of ball based on velocity
			ballObj[0].updateBallPos(ballObj[0].getXVel(), ballObj[0].getYvel());
			//obtain collision information based on velocity
			//inver Y direction if going out of bounds of box
			if(ballObj[0].getPosY() <=300 || ballObj[0].getPosY() >= 870)
			{
				ballObj[0].invertDirectionY();
				m_pFSystem->playSound(FMOD_CHANNEL_FREE, m_pFSound, false, &m_pFChannel);
			}
			//if ball velocity in positive direction, only check collision based on right paddle
			if(ballObj[0].getXVel() > 0.1)
			{
				//check collision of the right paddle if moving to the right(Paddlle B)
				gameObj[0].calcDistance(paddleObjB.getPosX(), ballObj[0].getPosX(), paddleObjB.getPosY(), ballObj[0].getPosY());
				//(ballObj[0].getWidth() * 0.5 + paddleObjB.getWidth() * 0.5); ballObj[0].getHeight() * 0.5 + paddleObjB.getHeight() * 0.5
				if(gameObj[0].getXDistance() <= 32)
				{
					if(gameObj[0].getYDistance() <= 80)
					{
						ballObj[0].incSpeed(0.15f);
						ballObj[0].invertDirectionX();
						m_pFSystem->playSound(FMOD_CHANNEL_FREE, m_pF1Sound, false, &m_pFChannel);
					}
					//set hit to true
				}
				if(ballObj[0].getPosX() >= 1170)
				{
					//reset the game
					paddleObjA.addScore(1);
					ballObj[0].setPos(800, 450);
					ballObj[0].setXVel(-0.3);
					ballObj[0].setYVel(0.3);
					ballObj[0].setBallSpeed(1.0);
				}
				//else do nothing

			}
			//if ball velocity in negative direction, then check only collision based upon the left paddle
			else if (ballObj[0].getXVel() < -0.1)
			{
				gameObj[0].calcDistance(paddleObjA.getPosX(), ballObj[0].getPosX(), paddleObjA.getPosY(), ballObj[0].getPosY());
				//check collision of the left paddle, when moving to the left(Paddle A)
				if(gameObj[0].getXDistance() <= 32)
				{
					if(gameObj[0].getYDistance() <= 80)
					{
						ballObj[0].incSpeed(0.15f);
						ballObj[0].invertDirectionX();
						m_pFSystem->playSound(FMOD_CHANNEL_FREE, m_pF1Sound, false, &m_pFChannel);
					}
					//set hit to true
				}
				if(ballObj[0].getPosX() <= 400 )
				{
					//reset the game
					paddleObjB.addScore(1);
					ballObj[0].setPos(800, 450);
					ballObj[0].setXVel(0.3);
					ballObj[0].setYVel(-0.3);
					ballObj[0].setBallSpeed(1.0);
				}
					//else do nothing
			}
		}
		else if(paddleObjA.getScore() == gameObj[0].getScoreToWin() || paddleObjB.getScore() == gameObj[0].getScoreToWin())
		{
			//setup paddle position
			paddleObjB.setScore(0);
			paddleObjA.setScore(0);
			paddleObjB.setPosX(1168);
			paddleObjB.setPosY(450);
			paddleObjA.setPosX(800 * 0.5);
			paddleObjA.setPosY(450);
			//Set up ball position
			ballObj[0].setPos(800, 450);
			//Set Up Ball velocity
			ballObj[0].setYVel(0.3);
			ballObj[0].setXVel(0.3);
			m_iState = 5; //set up to end game menu state asking for rematch
		}
	}
	/////////////////////
	//	END GAME STATE //
	/////////////////////
	/**********************************************************************************/
	///////////////////
	//Keyboard Input //
	///////////////////

	// ENTER BUTTON
	if(m_iState == 0)
	{
		if(m_pKeyboardState[DIK_RETURN] & 0x80)
		{
			m_pMediaControl->Stop();
			m_bVideoOver = true;
			//m_iState == 1;
		}
	}
	//////////////////
	// MENU OPTIONS //
	//////////////////
	if(m_iState == 1)
	{
		if(m_pKeyboardState[DIK_P] & 0x81)
		{
			m_iState = 2;
		}
		if(m_pKeyboardState[DIK_C] & 0x82)
		{
			m_iState = 3;
		}
		if(m_pKeyboardState[DIK_Q] & 0x83)
		{
			m_iState = 4;
		}
	}
	///////////////////////
	//W, A, S, D movement//
	///////////////////////
	if(m_iState == 2)
	{
		if(m_pKeyboardState[DIK_W] & 0x84)
		{
			//Control Player 1's Paddle UP
			if(paddleObjA.getPosY() > paddleObjA.getMinY())
			{
				paddleObjA.updatePosY(-0.75f);
			}
			else if(paddleObjA.getPosY() <= paddleObjA.getMinY())
			{
				paddleObjA.updatePosY(0.0);
			}
		}
		if(m_pKeyboardState[DIK_S] & 0x85)
		{
			//Control Player 1's Paddle DOWN
			if(paddleObjA.getPosY() < paddleObjA.getMaxY())
			{
				paddleObjA.updatePosY(0.75);
			}
			else if(paddleObjA.getPosY() >= paddleObjA.getMaxY())
			{
				paddleObjA.updatePosY(0.0f);
			}
		}
		//////////////////////
		//ARROW KEY MOVEMENT//
		//////////////////////
		if(m_pKeyboardState[DIK_UPARROW] & 0x888)
		{
			if(paddleObjB.getPosY() > paddleObjB.getMinY())
			{
				paddleObjB.updatePosY(-0.75);
			}
			else if(paddleObjB.getPosY() <= paddleObjB.getMinY())
			{
				paddleObjB.updatePosY(0.0);
			}
		}
		if(m_pKeyboardState[DIK_DOWNARROW] & 0x89)
		{
			if(paddleObjB.getPosY() < paddleObjB.getMaxY())
			{
				paddleObjB.updatePosY(0.75);
			}
			else if(paddleObjB.getPosY() >= paddleObjB.getMaxY())
			{
				paddleObjB.updatePosY(0.0);
			}
		}
	}

	//////////////////////
	// CREDITS STATE
	/////////////////////
	if(m_iState == 3)
	{
		if(m_pKeyboardState[DIK_M] & 0x93)
		{
			m_iState = 1;
		}
	}
	//////////////////////
	// MENU FOR END GAME//
	//////////////////////
	if(m_iState == 5)
	{
		if(m_pKeyboardState[DIK_Y] & 0x90)
		{
			m_iState = 2;
		}
		if(m_pKeyboardState[DIK_N] & 0x91)
		{
			m_iState = 1;
		}
	}
}

//The Render function will be our function used every frame to draw the objects. 
void DirectXFramework::Render()
{
	// If the device was not created successfully, return
	if(!m_pD3DDevice)
	{return;}
	//Get Window's size and state
	RECT rect; 
	GetWindowRect(m_hWnd, &rect);
	int width = rect.right - rect.left;
	int height = rect.bottom - rect.top;
	/*********************************************************************************/
	//Clear the buffer
	m_pD3DDevice->Clear(0, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(0, 0, 0), 1.0f, 0);
	m_pD3DDevice->BeginScene(); // begin the scene
	/////////////////////////
	//	GAME RENDER STATE  //
	/////////////////////////
	if(m_iState == 2)
	{
		//Clear the buffer
		m_pD3DDevice->Clear(0, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(255, 255,255), 1.0f, 0);
		m_pD3DDevice->BeginScene(); // begin the scene

		/////////////////////
		// Draw 2D Sprites //
		/////////////////////
		//Set the render state || D3DXSPRITE_OBJECTSPACE | D3DXSPRITE_DONOTMODIFY_RENDERSTATE
		m_pD3DSprite->Begin(D3DXSPRITE_ALPHABLEND);

		/*********************/
		//Create the matrices/
		/********************/
		D3DXMATRIX transMat, rotMat, scaleMat, multRSMat, worldMat;
		//-----------------------------//
		//Set Up the Matrices Identity//
		//----------------------------//
		D3DXMatrixIdentity(&transMat);
		D3DXMatrixIdentity(&rotMat);
		D3DXMatrixIdentity(&scaleMat);
		D3DXMatrixIdentity(&multRSMat);
		D3DXMatrixIdentity(&worldMat);
		//////////////
		//Set Scale//
		/////////////
		D3DXMatrixScaling(&scaleMat, 1.0f, 1.0f, 0.0f);

		/////////////////
		//Set Rotation//
		////////////////
		D3DXMatrixRotationZ(&rotMat, D3DXToRadian(0.0));

		///////////////////
		//Set Translation//
		///////////////////
		D3DXMatrixTranslation(&transMat, width * 0.5f, height * 0.5f, 0.0f);

		/**********************
		| Combine rot x scale |
		| Use separate Matrix |
		| to store new rxsMat.|
		| --------------------|
		| THEN: Multiply the  |
		| multRSMat x transMat|
		| and store in worldMat
		***********************/
		//multRS = rot x scale
		D3DXMatrixMultiply(&multRSMat, &rotMat, &scaleMat);
		// worldMat = multRSMat x transMat
		D3DXMatrixMultiply(&worldMat, &multRSMat, &transMat);
		//////////////////
		//Set Transform //
		//////////////////
		m_pD3DSprite->SetTransform(&worldMat);
		/*****************************
		| Draw Background Texture	 |
		*****************************/
		// Draw the texture with the sprite object:: Draw(pSrcTexture, pSrcRect, pCenter, pTranslation, Color)
		m_pD3DSprite->Draw(m_pBkgdTexture, 0, 
			&D3DXVECTOR3(m_imageInfo.Width * 0.5f, m_imageInfo.Height * 0.5f, 0.0f), 
			&D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DCOLOR_ARGB(255, 255, 255, 255));

		////////////////////
		//Draw the Paddles//
		////////////////////
		//Paddle 1
		//Set Scale
		D3DXMatrixScaling(&scaleMat, 1.0f, 1.0f, 0.0f);
		//Set Rotation
		D3DXMatrixRotationZ(&rotMat, D3DXToRadian(0.0f));
		//Set Translation
		D3DXMatrixTranslation(&transMat, 0, 0, 0.0f);
		//Multiply Matrices
		D3DXMatrixMultiply(&multRSMat, &rotMat, &scaleMat);
		D3DXMatrixMultiply(&worldMat, &multRSMat, &transMat);
		//set transform
		m_pD3DSprite->SetTransform(&worldMat);
		m_pD3DSprite->Draw(m_pBarP1Texture, 0,
			&D3DXVECTOR3(m_imageInfo.Width * 0.5f, m_imageInfo.Height * 0.5f, 0.0f),
			&D3DXVECTOR3(paddleObjA.getPosX(), paddleObjA.getPosY(), 0.0f), D3DCOLOR_ARGB(255, 255, 255, 255));
		//Paddle 2
		//Set Scale
		D3DXMatrixScaling(&scaleMat, 1.0f, 1.0f, 0.0f);
		//Set Rotation
		D3DXMatrixRotationZ(&rotMat, D3DXToRadian(0.0f));
		//Set Translation
		D3DXMatrixTranslation(&transMat, paddleObjB.getPosX(), paddleObjB.getPosY(), 0.0f);
		//Multiply Matrices
		D3DXMatrixMultiply(&multRSMat, &rotMat, &scaleMat);
		D3DXMatrixMultiply(&worldMat, &multRSMat, &transMat);
		//set transform
		m_pD3DSprite->SetTransform(&worldMat);
		m_pD3DSprite->Draw(m_pBarP2Texture, 0,
			&D3DXVECTOR3(m_imageInfo.Width * 0.5f, m_imageInfo.Height * 0.5f, 0.0f),
			&D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DCOLOR_ARGB(255, 255, 255, 255));
		///////////////////////
		// Draw the Ball	//
		//////////////////////
		//set the scale
		D3DXMatrixScaling(&scaleMat, 1.0f, 1.0f, 0.0f);
		//set the rotation
		D3DXMatrixRotationZ(&rotMat, D3DXToRadian(0.0f));
		//set the transation
		D3DXMatrixTranslation(&transMat, ballObj[0].getPosX(), ballObj[0].getPosY(), 0.0f);
	
		//Multiply the Matrices
		D3DXMatrixMultiply(&multRSMat, &rotMat, &scaleMat);
		D3DXMatrixMultiply(&worldMat, &multRSMat, &transMat);

		//set transform
		m_pD3DSprite->SetTransform(&worldMat);
		//draw the sprite
		m_pD3DSprite->Draw(m_pBallTexture, 0,
			&D3DXVECTOR3(m_imageInfo.Width * 0.5f, m_imageInfo.Height * 0.5f, 0.0f),
			&D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DCOLOR_ARGB(255, 255, 255, 255));
		//End the Scene
		m_pD3DSprite->End();
		////////////////////////////
		//	END GAME RENDER STATE //
		////////////////////////////
	}
	/*************************************************************************/
	///////////////////////////////////////////////
	//		DISPLAY GRAPHIC STAT TEXT			//
	//////////////////////////////////////////////
	//************************************************************************
	//Make static memory so we do not allocate the memory every time the function is called
	if(m_iState == 1)
	{
		static char buffer[256];
		//set sprintf to store the buffer size, format, and output)
		sprintf(buffer, "PONG! \n Menu: \n P: Start Game \n C: Credits \n Q: Quit");
		///////////////////////
		//Set Text For Display 
		//////////////////////
		rect.top = height * 0.05;
		rect.left = width * 0.05;
		//Draw display text here
		m_pD3DFont->DrawTextA(0, buffer, -1, &rect, DT_NOCLIP, D3DCOLOR_ARGB(255, 255, 255, 255));
	}
	if(m_iState == 2)
	{
		static char buffer[256];
		//set sprintf to store the buffer size, format, and output)
		sprintf(buffer, "FPS = %.2f Player 1: %d Player 2: %d", mFPS, paddleObjA.getScore(), paddleObjB.getScore());
		///////////////////////
		//Set Text For Display 
		//////////////////////
		rect.top = height * 0.05;
		rect.left = width * 0.05;
		//Draw display text here
		m_pD3DFont->DrawTextA(0, buffer, -1, &rect, DT_NOCLIP, D3DCOLOR_ARGB(255, 255, 255, 255));
	}
	if(m_iState == 3)
	{
		static char buffer[256];
		//set sprintf to store the buffer size, format, and output)
		sprintf(buffer, "Credits: \nAll rights belong to their respective owners. \nThis game was programmed and developed by Christopher Carlos \n\n\n(Press M to return to Menu!)");
		///////////////////////
		//Set Text For Display 
		//////////////////////
		rect.top = height * 0.05;
		rect.left = width * 0.05;
		//Draw display text here
		m_pD3DFont->DrawTextA(0, buffer, -1, &rect, DT_NOCLIP, D3DCOLOR_ARGB(255, 255, 255, 255));
	}
	if(m_iState == 5)
	{
		static char buffer[256];
		//set sprintf to store the buffer size, format, and output)
		sprintf(buffer, "Would you like to play again? (Y/N)");
		///////////////////////
		//Set Text For Display 
		//////////////////////
		rect.top = height * 0.05;
		rect.left = width * 0.05;
		//Draw display text here
		m_pD3DFont->DrawTextA(0, buffer, -1, &rect, DT_NOCLIP, D3DCOLOR_ARGB(255, 255, 255, 255));
	}
	//************************************************************************
	//EndScene
	m_pD3DDevice->EndScene();
	//Present Scene
	m_pD3DDevice->Present(NULL, NULL, NULL, NULL);
}
void DirectXFramework::Shutdown()
{
	//Release texture objects
	if(m_pBallTexture != NULL)
	{
		m_pBallTexture->Release();
		m_pBallTexture = NULL;
	}
	if(m_pBarP1Texture != NULL)
	{
		m_pBarP1Texture->Release();
		m_pBarP1Texture = NULL;
	}
	if(m_pBarP2Texture != NULL)
	{
		m_pBarP2Texture->Release();
		m_pBarP2Texture = NULL;
	}
	if(m_pBkgdTexture != NULL)
	{
		m_pBkgdTexture->Release();
		m_pBkgdTexture = NULL;
	}
	// Sprite
	if(m_pD3DSprite != NULL)
	{
		m_pD3DSprite->Release();
		m_pD3DSprite = NULL;
	}
	// Font
	if(m_pD3DFont != NULL)
	{
		m_pD3DFont->Release();
		m_pD3DFont = NULL;
	}
	// 3DDevice	
	if(m_pD3DDevice != NULL)
	{
		m_pD3DDevice->Release();
		m_pD3DDevice = NULL;
	}
	// 3DObject
	if(m_pD3DObject != NULL)
	{
		m_pD3DObject->Release();
		m_pD3DObject = NULL;
	}
	// Keyboard Object
	if(m_pDIKeyboard != NULL)
	{
		m_pDIKeyboard->Unacquire();
		m_pDIKeyboard->Release();
		m_pDIKeyboard = NULL;
		//ReleaseCOM(m_pKeyboardState);
	}
	// Mouse Object
	if(m_pDIMouse != NULL)
	{
		m_pDIMouse->Unacquire();
		m_pDIMouse->Release();
		m_pDIMouse = NULL;
		//ReleaseCOM(m_pMouseState);
	}
	// Direct Input Object
	if(m_pDIObject != NULL)
	{
		m_pDIObject->Release();
		m_pDIObject = NULL; 
	}
	if(m_pFSound != NULL)
	{
		m_pFSound->release();
		m_pFSound = NULL;
	}
	if(m_pMediaControl != NULL)
	{
		m_pMediaControl->Release();
		m_pMediaControl = NULL;
	}
	
	if(m_pMediaEvent != NULL)
	{
		m_pMediaEvent->Release();
		m_pMediaEvent = NULL;
	}
	if(m_pVideoWindow != NULL)
	{
		m_pVideoWindow->Release();
		m_pVideoWindow = NULL;
	}
	if(m_pGraphBuilder != NULL)
	{
		m_pGraphBuilder->Release();
		m_pGraphBuilder = NULL;
	}
}
void DirectXFramework::setState(int state)
{
	m_iState = state;
}
int DirectXFramework::getState()
{
	return m_iState;
}